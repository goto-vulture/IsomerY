// Token und Typ des Tokens
struct Token_And_Token_Type { const char* token; enum Token_Type type; };

// Testnamen
// Wichtig: Hier wird nur ueberprueft, ob der Lexer arbeitet. Sowohl der Autor als auch der Lexer ueberpruefen
//          nicht, ob die Namen semantisch richtig sind !
const char* iupac_names [] =
{
    "4-(1-methylethyl)heptane",
    "1,2,3-TriMethylDecane",
    "1-(2-(3-methylethyl)propyl)Octane",
    "3-Ethyl-3-methylheptane",
    "3-Ethyl-2,3,4-trimethylpentane",
    "n-Decane",
    "4-(1,1-DiMethylEthyl)Heptane"
};

// Erwartete Ergebnisse vom ersten Alkannamen
const struct Token_And_Token_Type array_1 [] =
{
        { "4",          TOKEN_TYPE_NUMBER           },
        { "-",          TOKEN_TYPE_SUB_CHAR         },
        { "(",          TOKEN_TYPE_OPEN_BRACKET     },
        { "1",          TOKEN_TYPE_NUMBER           },
        { "-",          TOKEN_TYPE_SUB_CHAR         },
        { "methyl",     TOKEN_TYPE_ALKYL_WORD       },
        { "ethyl",      TOKEN_TYPE_ALKYL_WORD       },
        { ")",          TOKEN_TYPE_CLOSE_BRACKET    },
        { "heptane",    TOKEN_TYPE_ALKANE_WORD      },
        { NULL,         TOKEN_TYPE_N_A              }
};
// Erwartete Ergebnisse vom zweiten Alkannamen
const struct Token_And_Token_Type array_2 [] =
{
        { "1",      TOKEN_TYPE_NUMBER       },
        { ",",      TOKEN_TYPE_COMMA_CHAR   },
        { "2",      TOKEN_TYPE_NUMBER       },
        { ",",      TOKEN_TYPE_COMMA_CHAR   },
        { "3",      TOKEN_TYPE_NUMBER       },
        { "-",      TOKEN_TYPE_SUB_CHAR     },
        { "Tri",    TOKEN_TYPE_NUMBER_WORD  },
        { "Methyl", TOKEN_TYPE_ALKYL_WORD   },
        { "Decane", TOKEN_TYPE_ALKANE_WORD  },
        { NULL,     TOKEN_TYPE_N_A          }
};
// Erwartete Ergebnisse vom dritten Alkannamen
const struct Token_And_Token_Type array_3 [] =
{
        { "1",      TOKEN_TYPE_NUMBER           },
        { "-",      TOKEN_TYPE_SUB_CHAR         },
        { "(",      TOKEN_TYPE_OPEN_BRACKET     },
        { "2",      TOKEN_TYPE_NUMBER           },
        { "-",      TOKEN_TYPE_SUB_CHAR         },
        { "(",      TOKEN_TYPE_OPEN_BRACKET     },
        { "3",      TOKEN_TYPE_NUMBER           },
        { "-",      TOKEN_TYPE_SUB_CHAR         },
        { "methyl", TOKEN_TYPE_ALKYL_WORD       },
        { "ethyl",  TOKEN_TYPE_ALKYL_WORD       },
        { ")",      TOKEN_TYPE_CLOSE_BRACKET    },
        { "propyl", TOKEN_TYPE_ALKYL_WORD       },
        { ")",      TOKEN_TYPE_CLOSE_BRACKET    },
        { "octane", TOKEN_TYPE_ALKANE_WORD      },
        { NULL,     TOKEN_TYPE_N_A              }
};
const struct Token_And_Token_Type array_4 [] =
{
        { "3",          TOKEN_TYPE_NUMBER       },
        { "-",          TOKEN_TYPE_SUB_CHAR     },
        { "Ethyl",      TOKEN_TYPE_ALKYL_WORD   },
        { "-",          TOKEN_TYPE_SUB_CHAR     },
        { "3",          TOKEN_TYPE_NUMBER       },
        { "-",          TOKEN_TYPE_SUB_CHAR     },
        { "methyl",     TOKEN_TYPE_ALKYL_WORD   },
        { "heptane",    TOKEN_TYPE_ALKANE_WORD  },
        { NULL,         TOKEN_TYPE_N_A          }
};
const struct Token_And_Token_Type array_5 [] =
{
        { "3",          TOKEN_TYPE_NUMBER       },
        { "-",          TOKEN_TYPE_SUB_CHAR     },
        { "Ethyl",      TOKEN_TYPE_ALKYL_WORD   },
        { "-",          TOKEN_TYPE_SUB_CHAR     },
        { "2",          TOKEN_TYPE_NUMBER       },
        { ",",          TOKEN_TYPE_COMMA_CHAR   },
        { "3",          TOKEN_TYPE_NUMBER       },
        { ",",          TOKEN_TYPE_COMMA_CHAR   },
        { "4",          TOKEN_TYPE_NUMBER       },
        { "-",          TOKEN_TYPE_SUB_CHAR     },
        { "Tri",        TOKEN_TYPE_NUMBER_WORD  },
        { "methyl",     TOKEN_TYPE_ALKYL_WORD   },
        { "pentane",    TOKEN_TYPE_ALKANE_WORD  },
        { NULL,         TOKEN_TYPE_N_A          }
};
const struct Token_And_Token_Type array_6 [] =
{
        { "n-",     TOKEN_TYPE_STRAIGHT_CHAIN   },
        { "Decane", TOKEN_TYPE_ALKANE_WORD      },
        { NULL,     TOKEN_TYPE_N_A              }
};
// 4-(1,1-DiMethylEthyl)Heptan
const struct Token_And_Token_Type array_7 [] =
{
        { "4",          TOKEN_TYPE_NUMBER           },
        { "-",          TOKEN_TYPE_SUB_CHAR         },
        { "(",          TOKEN_TYPE_OPEN_BRACKET     },
        { "1",          TOKEN_TYPE_NUMBER           },
        { ",",          TOKEN_TYPE_COMMA_CHAR       },
        { "1",          TOKEN_TYPE_NUMBER           },
        { "-",          TOKEN_TYPE_SUB_CHAR         },
        { "Di",         TOKEN_TYPE_NUMBER_WORD      },
        { "Methyl",     TOKEN_TYPE_ALKYL_WORD       },
        { "Ethyl",      TOKEN_TYPE_ALKYL_WORD       },
        { ")",          TOKEN_TYPE_CLOSE_BRACKET    },
        { "heptane",    TOKEN_TYPE_ALKANE_WORD      },
        { NULL,         TOKEN_TYPE_N_A              }
};
const struct Token_And_Token_Type* expected_tokens [] =
{
    array_1,
    array_2,
    array_3,
    array_4,
    array_5,
    array_6,
    array_7
};
